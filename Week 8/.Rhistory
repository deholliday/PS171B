type = "response")
kern_M1_noww_pred <- predict(M1_kern_noww,
newdata = as.matrix((M1_covars(hor.test.noww, F)$X) %>% dplyr::select(-worldwars)),
type = "response")
kern_M2_ww_pred <- predict(M2_kern_ww,
newdata = as.matrix(M2_covars(hor.test.ww, F)$X),
type = "response")
kern_M2_noww_pred <- predict(M2_kern_noww,
newdata = as.matrix((M2_covars(hor.test.noww, F)$X)%>% dplyr::select(-worldwars)),
type = "response")
#test set out of sample RMSE:
rmse.kern.m1.ww <- sqrt(mean((kern_m1_ww_pred$fit - hor.test.ww$finalcas)^2))
#test set out of sample RMSE:
rmse.kern.m1.ww <- sqrt(mean((kern_M1_ww_pred$fit - hor.test.ww$finalcas)^2))
rmse.kern.m1.noww <- sqrt(mean((kern_M1_noww_pred$fit - hor.test.noww$finalcas)^2))
rmse.kern.m2.ww <- sqrt(mean((kern_M2_ww_pred$fit - hor.test.ww$finalcas)^2))
rmse.kern.m2.noww <- sqrt(mean((kern_M2_noww_pred$fit - hor.test.noww$finalcas)^2))
kern_M1_ww_predis <- predict(M1_kern_ww,
newdata = as.matrix(M1_covars(hor.train.ww, F)$X),
type = "response")
kern_M1_noww_predis <- predict(M1_kern_noww,
newdata = as.matrix((M1_covars(hor.train.noww, F)$X) %>% dplyr::select(-worldwars)),
type = "response")
kern_M2_ww_predis <- predict(M2_kern_ww,
newdata = as.matrix(M2_covars(hor.train.ww, F)$X),
type = "response")
kern_M2_noww_predis <- predict(M2_kern_noww,
newdata = as.matrix((M2_covars(hor.train.noww, F)$X)%>% dplyr::select(-worldwars)),
type = "response")
in.rmse.kern.m1.ww <- sqrt(mean((kern_M1_ww_predis$fit - hor.train.ww$finalcas)^2))
length(kern_M1_ww_predis)
nrow(kern_M1_ww_predis)
kern_M1_ww_predis
kern.rmse.df = data.frame(model = c("M1","M1","M2","M2"),
world.ward = c("Yes","No","Yes","No"),
rmse.out = c(rmse.kern.m1.ww, rmse.kern.m1.noww,
rmse.kern.m2.ww, rmse.kern.m2.noww))
kable(kern.rmse.df, caption = "Kernel Regularization - RMSEs")
length(kern_M1_ww_predis$fit)
length(hor.train.ww$finalcas)
#test in sample RMSE:
in.rmse.kern.m1.ww <- sqrt(mean((kern_M1_ww_predis$fit - as.matrix(M1_covars(hor.train.ww, F)$y))^2))
#test in sample RMSE:
in.rmse.kern.m1.ww <- sqrt(mean((kern_M1_ww_predis$fit - as.matrix(M1_covars(hor.train.ww, F)$y))^2))
in.rmse.kern.m1.noww <- sqrt(mean((kern_M1_noww_predis$fit - as.matrix((M1_covars(hor.train.noww, F)$y) %>% dplyr::select(-worldwars)))^2))
in.rmse.kern.m1.noww <- sqrt(mean((kern_M1_noww_predis$fit - as.matrix((M1_covars(hor.train.noww, F)$y) ))^2))
in.rmse.kern.m2.ww <- sqrt(mean((kern_M2_ww_predis$fit - as.matrix(M2_covars(hor.train.ww, F)$y))^2))
in.rmse.kern.m2.noww <- sqrt(mean((kern_M2_noww_predis$fit - as.matrix((M2_covars(hor.train.noww, F)$y) ))^2))
kern.rmse.df = data.frame(model = c("M1","M1","M2","M2"),
world.war = c("Yes","No","Yes","No"),
rmse.in = c(in.rmse.kern.m1.ww, in.rmse.kern.m1.noww,
in.rmse.kern.m2.ww, in.rmse.kern.m2.noww),
rmse.out = c(rmse.kern.m1.ww, rmse.kern.m1.noww,
rmse.kern.m2.ww, rmse.kern.m2.noww))
kable(kern.rmse.df, caption = "Kernel Regularization - RMSEs",
col.names = c("Model","World Wars Included?","RMSE - In Sample", "RMSE - Out of Sample"))
#pass in lambda dist and training X and Y data
regularize <- function( X_train, Y_train, X_test, Y_test, offset_on) {
#because we passed in data frames but glmnet needs matrixes
X_train <- as.matrix(X_train)
Y_train <- as.matrix(Y_train)
X_test <- as.matrix(X_test)
Y_test <- as.matrix(Y_test)
#ridge
ridge <- glmnet(X_train, log(Y_train+1),
offset = if(offset_on == TRUE) {log(X_train[,"duration"]) }
else{NULL},
alpha = 0)
ridge_out <- cv.glmnet(X_train, log(Y_train+1),
offset = if(offset_on == TRUE) {log(X_train[,"duration"]) }
else{NULL},
alpha = 0)
bestlam_ridge <- ridge_out$lambda.min
#lasso
lasso <- glmnet(X_train, log(Y_train+1),
offset = if(offset_on == TRUE) {log(X_train[,"duration"]) }
else{NULL},
alpha = 1)
lasso_out <- cv.glmnet(X_train, log(Y_train+1),
offset = if(offset_on == TRUE) {
log(X_train[,"duration"]) } else{NULL},
alpha = 1)
bestlam_lasso <- lasso_out$lambda.min
#coefs
ridge_coef <- predict(ridge, type = "coefficients",
s = bestlam_ridge, newx = X_train,
newoffset = if(offset_on == TRUE)
{log(X_train[,"duration"]) } else{NULL})
lasso_coef <- predict(lasso, type = "coefficients",
s=bestlam_lasso, newdata = X_train,
newoffset = if(offset_on == TRUE)
{log(X_train[,"duration"]) }  else{NULL})
#plot MSE versus log(lambda)
ridge_gg <- data.frame(MSE_avg = ridge_out$cvm,
log_lambda = log(ridge_out$lambda),
SD_ribbon_h = ridge_out$cvup,
SD_ribbon_l = ridge_out$cvlo)
lasso_gg <- data.frame(MSE_avg = lasso_out$cvm,
log_lambda = log(lasso_out$lambda),
SD_ribbon_h = lasso_out$cvup,
SD_ribbon_l = lasso_out$cvlo)
ridge_plot <- ggplot() +
geom_point(aes(x = log_lambda, y = MSE_avg), data = ridge_gg) +
geom_ribbon(aes(x = log_lambda, ymin= SD_ribbon_l, ymax= SD_ribbon_h,
alpha = 0.5),
data = ridge_gg) +
geom_point(aes(x = log(ridge_out$lambda.min),
y = ridge_gg$MSE_avg[which(ridge_gg$log_lambda ==
log(ridge_out$lambda.min))],
color = "Best")) +
scale_color_discrete("") +
xlab("Log Lambda") +
ylab("Average 10 fold CV MSE") +
ggtitle("Ridge CV MSE Performance for Various lambdas (Horowitz)")
lasso_plot <- ggplot() +
geom_point(aes(x = log_lambda, y = MSE_avg), data = lasso_gg) +
geom_ribbon(aes(x = log_lambda, ymin= SD_ribbon_l, ymax= SD_ribbon_h,
alpha = 0.5),
data = lasso_gg) +
geom_point(aes(x = log(lasso_out$lambda.min),
y = lasso_gg$MSE_avg[which(lasso_gg$log_lambda ==
log(lasso_out$lambda.min))],
color = "Best")) +
scale_color_discrete("") +
xlab("Log Lambda") +
ylab("Average 10 fold CV MSE") +
ggtitle("Lasso CV MSE Performance for Various lambdas (Horowitz)")
#MEASURES OF FIT:
#test data MSE
#MSE Calculation (OOS) for Test data
#s is the value of the penalty parameter lambda where preditions are required
#lambda.1se out of cv.glmnet is largest lambda suh that error within on SD of the
#minimum lambda (= one sd above the min CV MSE lambda)
#recall that the larger lambda is the more the minimization is dominated by the l1     or l2 norm penalty term forcing betas closer they will be pushed to zero
#so this is the most conservative approach because it chooses the smallest             magnitude betas still winin one SD of the min MSE CV lambda
ridge_pred_y_test = predict(ridge,
s=ridge_out$lambda.1se,
newx = X_test,
type = "response",
newoffset = if(offset_on == TRUE)
{log(as.numeric(X_test[,"duration"])) }
else{NULL})
lasso_pred_y_test = predict(lasso,
s=lasso_out$lambda.1se,
type = "response",
newx = X_test,
newoffset = if(offset_on == TRUE)
{log(as.numeric(X_test[,"duration"]))} else{NULL})
ridge_mse_test = mean((Y_test - exp(ridge_pred_y_test))^2)
lasso_mse_test = mean((Y_test- exp(lasso_pred_y_test))^2)
ridge_rmse_test = sqrt(mean((Y_test - exp(ridge_pred_y_test))^2))
lasso_rmse_test = sqrt(mean((Y_test- exp(lasso_pred_y_test))^2))
#R^2
# XXXX WHAT why is the SSR larger than the TSS?
ridge_pred_y_train = predict(ridge,
s=ridge_out$lambda.min,
newx = X_train,
type = "response",
newoffset = if(offset_on == TRUE)
{log(as.numeric(X_test[,"duration"])) }
else{NULL})
TSS_in <- sum((Y_train - mean(Y_train))^2)
SSR_in_r <- sum((Y_train - exp(ridge_pred_y_train))^2)
R2_in_r <- 1- SSR_in_r/TSS_in
TSS_out <- sum((Y_test - mean(Y_train))^2)
SSR_out_r <- sum((Y_test - ridge_pred_y_test)^2)
R2_out_r <- 1- SSR_out_r/TSS_out
lasso_pred_y_train = predict(lasso,
s= lasso_out$lambda.min,
newx = X_train,
type = "response",
newoffset = if(offset_on == TRUE)
{log(as.numeric(X_test[,"duration"])) }
else{NULL})
SSR_in_l <- sum((Y_train - exp(lasso_pred_y_train))^2)
R2_in_l <- 1- SSR_in_l/TSS_in
TSS_out_l <- sum((Y_test - mean(Y_train))^2)
SSR_out_l <- sum((Y_test - lasso_pred_y_test)^2)
R2_out_l <- 1- SSR_out_l/TSS_out
#uncommet for internal testing
# X_train <- M1_covars(hor.train.ww, T)$X
# Y_train <- M1_covars(hor.train.ww, T)$y
# X_test <- M1_covars(hor.test.ww, T)$X
# Y_test <- M1_covars(hor.test.ww, T)$y
# offset_on = F
return(list(ridge_out = ridge_out,
ridge_coefs = ridge_coef,
ridge_MSE_plot = ridge_plot,
ridge_best_lambda = bestlam_ridge,
lasso_out = lasso_out,
lasso_coefs = lasso_coef,
lasso_MSE_plot = lasso_plot,
lasso_best_lambda = bestlam_lasso,
coefs = cbind(ridge_coef, lasso_coef),
ridge_MSE_test = ridge_mse_test,
lasso_MSE_test = lasso_mse_test,
ridge_RMSE_test = ridge_rmse_test,
lasso_RMSE_test = lasso_rmse_test,
ridge_R2_in = R2_in_r,
lasso_R2_in = R2_in_l,
ridge_R2_test = R2_out_r,
lasso_R2_test = R2_out_l,
n_train = nrow(X_train)))
}
# Run Regulatization
M1_reg_ww_I <- regularize(M1_covars(hor.train.ww, T)$X,
M1_covars(hor.train.ww, T)$y,
M1_covars(hor.test.ww, T)$X,
M1_covars(hor.test.ww, T)$y,
offset_on = F)
M1_reg_noww_I <- regularize(M1_covars(hor.train.noww, T)$X,
M1_covars(hor.train.noww, T)$y,
M1_covars(hor.test.noww, T)$X,
M1_covars(hor.test.noww, T)$y,
offset_on = F)
M2_reg_ww_I <- regularize(M2_covars(hor.train.ww, T)$X,
M2_covars(hor.train.ww, T)$y,
M2_covars(hor.test.ww, T)$X,
M2_covars(hor.test.ww, T)$y,
offset_on = F)
M2_reg_noww_I <- regularize(M2_covars(hor.train.noww, T)$X,
M2_covars(hor.train.noww, T)$y,
M2_covars(hor.test.noww, T)$X,
M2_covars(hor.test.noww, T)$y,
offset_on = F)
# Compile Results
reg_results_M1 <- data.frame(Ridge_ww = M1_reg_ww_I$coefs[,1],
Lasso_ww = M1_reg_ww_I$coefs[,2],
Ridge_ww = M1_reg_noww_I$coefs[,1],
Lasso_noww = M1_reg_noww_I$coefs[,2])
reg_results_M1 <- rbind(reg_results_M1, ww = c("Yes", "Yes", "No", "No"))
reg_results_M1 <- rbind(reg_results_M1, RMSE = c(M1_reg_ww_I$ridge_RMSE_test,
M1_reg_ww_I$lasso_RMSE_test,
M1_reg_noww_I$ridge_RMSE_test,
M1_reg_noww_I$lasso_RMSE_test))
reg_results_M1 <- rbind(reg_results_M1, R2 = c(M1_reg_ww_I$ridge_R2_test,
M1_reg_ww_I$lasso_R2_test,
M1_reg_noww_I$ridge_R2_test,
M1_reg_noww_I$lasso_R2_test))
colnames(reg_results_M1) <- c("Ridge", "Lasso", "Ridge", "Lasso")
rownames(reg_results_M1) <- c("Intercept", "Conscription", "World Wars",
"Democracy", "Democracy*Conscription", "Terrain",
"Mil. Personnel", "Military Spending",
"Spending per Troop",
"Iron/Steel Prod", "Year", "Year^2", "Total Population",
"Urban Population", "WW Included?",
"Out-of-Sample RMSE", "Out-of-Sample R^2")
reg_results_M2 <- data.frame(Ridge_ww = M2_reg_ww_I$coefs[,1],
Lasso_ww = M2_reg_ww_I$coefs[,2],
Ridge_ww = M2_reg_noww_I$coefs[,1],
Lasso_noww = M2_reg_noww_I$coefs[,2])
reg_results_M2 <- rbind(reg_results_M2, ww = c("Yes", "Yes", "No", "No"))
reg_results_M2 <- rbind(reg_results_M2, RMSE = c(M2_reg_ww_I$ridge_RMSE_test,
M2_reg_ww_I$lasso_RMSE_test,
M2_reg_noww_I$ridge_RMSE_test,
M2_reg_noww_I$lasso_RMSE_test))
reg_results_M2 <- rbind(reg_results_M2, R2 = c(M2_reg_ww_I$ridge_R2_test,
M2_reg_ww_I$lasso_R2_test,
M2_reg_noww_I$ridge_R2_test,
M2_reg_noww_I$lasso_R2_test))
colnames(reg_results_M2) <- c("Ridge", "Lasso", "Ridge", "Lasso")
rownames(reg_results_M2) <- c("Intercept", "Conscription",
"Democracy","Initiator", "World War",
"Democr*Init",
"Democracy*Conscr", "Democr*Conscr*Init",
"Conscr*Init",
"Existential", "Democr*Existential",
"Terrain", "Strategy",
"Military Spending", "Mil. Personnel",
"Spending per Troop",
"Iron/Steel Prod", "Total Population",
"Urban Population",
"Year", "Year^2",
"WW Included?",
"Out-of-Sample RMSE", "Out-of-Sample R^2")
kable(reg_results_M1, format = 'latex', booktabs = T,
caption = "Regularized Regression Results for Model 1", digits = 4) %>%
kable_styling(latex_options = "scale_down")
kable(reg_results_M2, format = 'latex', booktabs = T,
caption = "Regularized Regression Results for Model 2", digits = 4) %>%
kable_styling(latex_options = "scale_down")
# Kernel Rsquared :'(
k.tss.m1.ww = sum((kern_M1_ww_pred - mean(kern_M1_ww_predis))^2)
# Kernel Rsquared :'(
k.tss.m1.ww = sum((kern_M1_ww_pred$fit - mean(kern_M1_ww_predis$fit))^2)
k.tss.m1.noww = sum((kern_M1_noww_pred$fit - mean(kern_M1_noww_predis$fit))^2)
k.tss.m2.ww = sum((kern_M2_ww_pred$fit - mean(kern_M2_ww_predis$fit))^2)
k.tss.m2.noww = sum((kern_M2_noww_pred$fit - mean(kern_M2_noww_predis$fit))^2)
# Kernel Rsquared :'(
k.tss.m1.ww = sum((kern_M1_ww_pred$fit - mean(as.matrix(M1_covars(hor.train.ww, F)$y)))^2)
k.tss.m1.noww = sum((kern_M1_noww_pred$fit - mean(as.matrix((M1_covars(hor.train.noww, F)$y))))^2)
k.tss.m2.ww = sum((kern_M2_ww_pred$fit - mean(as.matrix(M1_covars(hor.train.ww, F)$y)))^2)
k.tss.m2.noww = sum((kern_M2_noww_pred$fit - mean(as.matrix((M1_covars(hor.train.noww, F)$y))))^2)
k.tss.m1.ww = sum((as.matrix(M1_covars(hor.test.ww, F)$y) -
mean(as.matrix(M1_covars(hor.test.ww, F)$y)))^2)
k.tss.m1.noww = sum((as.matrix((M1_covars(hor.test.noww, F)$y)) -
mean(as.matrix((M1_covars(hor.test.noww, F)$y))))^2)
k.tss.m2.ww = sum((as.matrix(M1_covars(hor.test.ww, F)$y) -
mean(as.matrix(M1_covars(hor.test.ww, F)$y)))^2)
k.tss.m2.noww = sum((as.matrix((M1_covars(hor.test.noww, F)$y)) -
mean(as.matrix((M1_covars(hor.test.noww, F)$y))))^2)
k.r2.m1.ww = 1 - k.ssr.m1.ww/k.tss.m1.ww
# Kernel Rsquared :'(
k.ssr.m1.ww = sum((kern_M1_ww_pred$fit - as.matrix(M1_covars(hor.test.ww, F)$y))^2)
k.ssr.m1.noww = sum((kern_M1_noww_pred$fit - as.matrix((M1_covars(hor.test.noww, F)$y)))^2)
k.ssr.m2.ww = sum((kern_M2_ww_pred$fit - as.matrix(M1_covars(hor.test.ww, F)$y))^2)
k.ssr.m2.noww = sum((kern_M2_noww_pred$fit - as.matrix((M1_covars(hor.test.noww, F)$y)))^2)
k.r2.m1.ww = 1 - k.ssr.m1.ww/k.tss.m1.ww
k.r2.m1.noww = 1 - k.ssr.m1.noww/k.tss.m1.noww
k.r2.m2.ww = 1 - k.ssr.m2.ww/k.tss.m2.ww
k.r2.m2.noww = 1 - k.ssr.m2.noww/k.tss.m2.noww
kern.rmse.df = data.frame(model = c("M1","M1","M2","M2"),
world.war = c("Yes","No","Yes","No"),
rmse.in = c(in.rmse.kern.m1.ww, in.rmse.kern.m1.noww,
in.rmse.kern.m2.ww, in.rmse.kern.m2.noww),
rmse.out = c(rmse.kern.m1.ww, rmse.kern.m1.noww,
rmse.kern.m2.ww, rmse.kern.m2.noww),
r.sq.out = c(k.r2.m1.ww, k.r2.m1.noww,
k.r2.m2.ww, k.r2.m2.noww))
kable(kern.rmse.df, caption = "Kernel Regularization - RMSEs",
col.names = c("Model","World Wars Included?","RMSE - In Sample", "RMSE - Out of Sample"))
kable(kern.rmse.df, caption = "Kernel Regularization - RMSEs",
col.names = c("Model","World Wars Included?","RMSE - In Sample",
"RMSE - Out of Sample", "RSq - OOS"))
k.tss.m1.ww = sum((as.matrix(M1_covars(hor.test.ww, F)$y) -
mean(as.matrix(M1_covars(hor.train.ww, F)$y)))^2)
k.tss.m1.noww = sum((as.matrix((M1_covars(hor.test.noww, F)$y)) -
mean(as.matrix((M1_covars(hor.train.noww, F)$y))))^2)
k.tss.m2.ww = sum((as.matrix(M1_covars(hor.test.ww, F)$y) -
mean(as.matrix(M1_covars(hor.train.ww, F)$y)))^2)
k.tss.m2.noww = sum((as.matrix((M1_covars(hor.test.noww, F)$y)) -
mean(as.matrix((M1_covars(hor.train.noww, F)$y))))^2)
k.r2.m1.ww = 1 - k.ssr.m1.ww/k.tss.m1.ww
k.r2.m1.noww = 1 - k.ssr.m1.noww/k.tss.m1.noww
k.r2.m2.ww = 1 - k.ssr.m2.ww/k.tss.m2.ww
k.r2.m2.noww = 1 - k.ssr.m2.noww/k.tss.m2.noww
kern.rmse.df = data.frame(model = c("M1","M1","M2","M2"),
world.war = c("Yes","No","Yes","No"),
rmse.in = c(in.rmse.kern.m1.ww, in.rmse.kern.m1.noww,
in.rmse.kern.m2.ww, in.rmse.kern.m2.noww),
rmse.out = c(rmse.kern.m1.ww, rmse.kern.m1.noww,
rmse.kern.m2.ww, rmse.kern.m2.noww),
r.sq.out = c(k.r2.m1.ww, k.r2.m1.noww,
k.r2.m2.ww, k.r2.m2.noww))
kable(kern.rmse.df, caption = "Kernel Regularization - RMSEs",
col.names = c("Model","World Wars Included?","RMSE - In Sample",
"RMSE - Out of Sample", "RSq - OOS"))
library(rvest)
library(tidyverse)
library(RSelenium)
library(seleniumPipes)
rD = rsDriver()
errorDetails()
install.packages("RSelenium")
install.packages("RSelenium")
install.packages("RSelenium")
library(XML)
url = "https://www.c-span.org/search/?empty-date=1&sdate=&edate=&searchtype=Videos&sort=Most+Recent+Airing&text=0&seriesid%5B%5D=99S10&formatid%5B%5D=18&show100="
doc = htmlTreeParse(url, useInternal = T)
xpathSApply(doc, "//a[@href]", xmlGetAttr, "href")
library(RCurl)
url = getURL("https://www.c-span.org/search/?empty-date=1&sdate=&edate=&searchtype=Videos&sort=Most+Recent+Airing&text=0&seriesid%5B%5D=99S10&formatid%5B%5D=18&show100=")
sParse = htmlParse(url)
xpathSApply(sParse, "//a[@target='_blank']", xmlGetAttr, "href")
xpathSApply(sParse, "a", xmlGetAttr, "href")
xpathSApply(sParse, "//a", xmlGetAttr, "href")
install.packages(c("AER", "assertthat", "backports", "BH", "bindr", "bindrcpp", "bit", "broom", "callr", "caTools", "checkmate", "classInt", "cli", "clipr", "cobalt", "coda", "colorspace", "curl", "data.table", "dbplyr", "deldir", "DescTools", "digest", "dplyr", "e1071", "english", "evaluate", "expm", "ff", "forcats", "Formula", "gam", "ggstance", "glue", "gower", "gtable", "haven", "highr", "Hmisc", "hms", "htmlTable", "htmlwidgets", "httpuv", "httr", "ISOcodes", "iterators", "jsonlite", "jtools", "kableExtra", "knitr", "later", "lazyeval", "leaflet", "lexicon", "lfe", "lme4", "lmtest", "lubridate", "maptools", "mapview", "markdown", "Matching", "memisc", "mgsub", "mime", "modelr", "multcomp", "network", "nloptr", "openssl", "ordinal", "packrat", "pdftools", "pkgconfig", "plogr", "polspline", "polyclip", "polynom", "processx", "ps", "psych", "purrr", "quantreg", "R.utils", "R6", "RANN", "raster", "RcppArmadillo", "RcppEigen", "RCurl", "rdrobust", "readr", "readxl", "recipes", "repr", "reprex", "reshape2", "reticulate", "rgdal", "rgeos", "RJSONIO", "rlang", "rmarkdown", "rms", "rprojroot", "rsconnect", "rstudioapi", "sandwich", "selectr", "sf", "shiny", "slam", "spatialEco", "spatstat", "spatstat.data", "spatstat.utils", "spData", "spdep", "stargazer", "stars", "stringi", "stringr", "survey", "tesseract", "TH.data", "tibble", "tidyr", "tidyselect", "units", "webshot", "XML", "xml2", "xtable", "yaImpute", "yaml", "zoo"))
library(RSelenium)
rD = rsDriver()
rD = rsDriver()
remDr$close()
rD$server$stop()
rD = rsDriver()
remove.packages("RSelenium")
install.packages("RSelenium")
library(seleniumPipes)
library(RSelenium)
rD = rsDriver()
rD = rsDriver(browserName = 'firefox')
remDr$close()
rD$server$stop()
rD = rsDriver(browserName = 'firefox')
rD = rsDriver(browser = 'firefox')
rD$server$stop()
rD = rsDriver(browser = 'firefox')
# New York
new_york = fread("~/Dropbox/311/01_data/311/new_york.csv", header = TRUE, sep = ",") %>%
select(`Created Date`, `Closed Date`, `Complaint Type`, Latitude, Longitude) %>%
rename(service = `Complaint Type`, open_date = `Created Date`, close_date = `Closed Date`, lat = Latitude, long = Longitude) %>%
mutate(open_date = sapply(strsplit(.$open_date, "\\s+"), "[", 1),
close_date = sapply(strsplit(.$close_date, "\\s+"), "[", 1),
open_date = as.Date(open_date, "%m/%d/%Y"),
close_date = as.Date(close_date, "%m/%d/%Y"),
wait_time = as.numeric(close_date - open_date),
wait_time = case_when(wait_time < 0 ~ NA_real_,
TRUE ~ wait_time),
log_wait_time = round(log(wait_time + 1), digits = 2),
city = "New York, NY") %>%
select(city, service, open_date, close_date, wait_time, log_wait_time, lat, long) %>%
filter(open_date >= "2008-01-01" & open_date <= "2018-12-31") %>%
na.omit(.) %>%
filter(service %in% c("Noise - Residential", "Noise", "HEAT/HOT WATER", "HEATING",
"Street Condition", "Street Light Condition", "Blocked Driveway",
"Illegal Parking", "PLUMBING", "Water System", "GENERAL CONSTRUCTION",
"Traffic Signal Condition")) %>%
mutate(service = case_when(service == "Noise - Residential" | service == "Noise" ~ "Noise",
service == "HEAT/HOT WATER" | service == "HEATING" ~ "Heat & Hot Water",
service == "Street Condition" ~ "Street Condition",
service == "Street Light Condition" ~ "Street Lights",
service == "PLUMBING" ~ "Plumbing",
service == "Water System" ~ "Water Issues",
service == "GENERAL CONSTRUCTION" ~ "Construction",
service == "Traffic Signal Condition" ~ "Traffic Signs & Signals",
TRUE ~ service),
dup_request = ifelse(duplicated(.[c("lat", "long", "open_date", "service")])
| duplicated(.[c("lat", "long", "open_date", "service")], fromLast = TRUE), 1, 0),
dup_request = case_when(is.na(lat) | is.na(long) | is.na(open_date) | is.na(service) ~ NA_real_,
TRUE ~ dup_request)) %>%
unite_(., "city_service", c("city","service"), sep = "_", remove = FALSE) %>%
add_count(., lat, long, open_date, service) %>%
rename(num_requests = n) %>%
mutate(num_requests = as.numeric(num_requests),
num_requests = case_when(is.na(lat) | is.na(long) | is.na(open_date) | is.na(service) ~ NA_real_,
TRUE ~ num_requests)) %>%
na.omit(.)
## Loading packages
# install.packages(c("data.table", "tidyverse"))
library(data.table)
library(tidyverse)
# New York
new_york = fread("~/Dropbox/311/01_data/311/new_york.csv", header = TRUE, sep = ",") %>%
select(`Created Date`, `Closed Date`, `Complaint Type`, Latitude, Longitude) %>%
rename(service = `Complaint Type`, open_date = `Created Date`, close_date = `Closed Date`, lat = Latitude, long = Longitude) %>%
mutate(open_date = sapply(strsplit(.$open_date, "\\s+"), "[", 1),
close_date = sapply(strsplit(.$close_date, "\\s+"), "[", 1),
open_date = as.Date(open_date, "%m/%d/%Y"),
close_date = as.Date(close_date, "%m/%d/%Y"),
wait_time = as.numeric(close_date - open_date),
wait_time = case_when(wait_time < 0 ~ NA_real_,
TRUE ~ wait_time),
log_wait_time = round(log(wait_time + 1), digits = 2),
city = "New York, NY") %>%
select(city, service, open_date, close_date, wait_time, log_wait_time, lat, long) %>%
filter(open_date >= "2008-01-01" & open_date <= "2018-12-31") %>%
na.omit(.) %>%
filter(service %in% c("Noise - Residential", "Noise", "HEAT/HOT WATER", "HEATING",
"Street Condition", "Street Light Condition", "Blocked Driveway",
"Illegal Parking", "PLUMBING", "Water System", "GENERAL CONSTRUCTION",
"Traffic Signal Condition")) %>%
mutate(service = case_when(service == "Noise - Residential" | service == "Noise" ~ "Noise",
service == "HEAT/HOT WATER" | service == "HEATING" ~ "Heat & Hot Water",
service == "Street Condition" ~ "Street Condition",
service == "Street Light Condition" ~ "Street Lights",
service == "PLUMBING" ~ "Plumbing",
service == "Water System" ~ "Water Issues",
service == "GENERAL CONSTRUCTION" ~ "Construction",
service == "Traffic Signal Condition" ~ "Traffic Signs & Signals",
TRUE ~ service),
dup_request = ifelse(duplicated(.[c("lat", "long", "open_date", "service")])
| duplicated(.[c("lat", "long", "open_date", "service")], fromLast = TRUE), 1, 0),
dup_request = case_when(is.na(lat) | is.na(long) | is.na(open_date) | is.na(service) ~ NA_real_,
TRUE ~ dup_request)) %>%
unite_(., "city_service", c("city","service"), sep = "_", remove = FALSE) %>%
add_count(., lat, long, open_date, service) %>%
rename(num_requests = n) %>%
mutate(num_requests = as.numeric(num_requests),
num_requests = case_when(is.na(lat) | is.na(long) | is.na(open_date) | is.na(service) ~ NA_real_,
TRUE ~ num_requests)) %>%
na.omit(.)
# New York
new_york = fread("C:/Users/d-hol/Dropbox/311/01_data/311/new_york.csv", header = TRUE, sep = ",") %>%
select(`Created Date`, `Closed Date`, `Complaint Type`, Latitude, Longitude) %>%
rename(service = `Complaint Type`, open_date = `Created Date`, close_date = `Closed Date`, lat = Latitude, long = Longitude) %>%
mutate(open_date = sapply(strsplit(.$open_date, "\\s+"), "[", 1),
close_date = sapply(strsplit(.$close_date, "\\s+"), "[", 1),
open_date = as.Date(open_date, "%m/%d/%Y"),
close_date = as.Date(close_date, "%m/%d/%Y"),
wait_time = as.numeric(close_date - open_date),
wait_time = case_when(wait_time < 0 ~ NA_real_,
TRUE ~ wait_time),
log_wait_time = round(log(wait_time + 1), digits = 2),
city = "New York, NY") %>%
select(city, service, open_date, close_date, wait_time, log_wait_time, lat, long) %>%
filter(open_date >= "2008-01-01" & open_date <= "2018-12-31") %>%
na.omit(.) %>%
filter(service %in% c("Noise - Residential", "Noise", "HEAT/HOT WATER", "HEATING",
"Street Condition", "Street Light Condition", "Blocked Driveway",
"Illegal Parking", "PLUMBING", "Water System", "GENERAL CONSTRUCTION",
"Traffic Signal Condition")) %>%
mutate(service = case_when(service == "Noise - Residential" | service == "Noise" ~ "Noise",
service == "HEAT/HOT WATER" | service == "HEATING" ~ "Heat & Hot Water",
service == "Street Condition" ~ "Street Condition",
service == "Street Light Condition" ~ "Street Lights",
service == "PLUMBING" ~ "Plumbing",
service == "Water System" ~ "Water Issues",
service == "GENERAL CONSTRUCTION" ~ "Construction",
service == "Traffic Signal Condition" ~ "Traffic Signs & Signals",
TRUE ~ service),
dup_request = ifelse(duplicated(.[c("lat", "long", "open_date", "service")])
| duplicated(.[c("lat", "long", "open_date", "service")], fromLast = TRUE), 1, 0),
dup_request = case_when(is.na(lat) | is.na(long) | is.na(open_date) | is.na(service) ~ NA_real_,
TRUE ~ dup_request)) %>%
unite_(., "city_service", c("city","service"), sep = "_", remove = FALSE) %>%
add_count(., lat, long, open_date, service) %>%
rename(num_requests = n) %>%
mutate(num_requests = as.numeric(num_requests),
num_requests = case_when(is.na(lat) | is.na(long) | is.na(open_date) | is.na(service) ~ NA_real_,
TRUE ~ num_requests)) %>%
na.omit(.)
50 + .4 * (1 + exp(10))
exp(10)
setwd("~/GitHub/PS171B/Week 8")
